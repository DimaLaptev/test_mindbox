#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–µ–≥–∫–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É geometry_calculator.
"""

import math
from geometry_calculator import Shape, calculate_area


# –ü—Ä–∏–º–µ—Ä 1: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
class Rectangle(Shape):
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫."""
    
    def __init__(self, width: float, height: float):
        if not isinstance(width, (int, float)) or not isinstance(height, (int, float)):
            raise TypeError("–®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        
        if width <= 0 or height <= 0:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        self.width = width
        self.height = height
    
    def area(self) -> float:
        return self.width * self.height
    
    def __str__(self) -> str:
        return f"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫({self.width}x{self.height})"


# –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
class RegularHexagon(Shape):
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫."""
    
    def __init__(self, side_length: float):
        if not isinstance(side_length, (int, float)):
            raise TypeError("–î–ª–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if side_length <= 0:
            raise ValueError("–î–ª–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        self.side_length = side_length
    
    def area(self) -> float:
        # –ü–ª–æ—â–∞–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞: (3‚àö3/2) * a¬≤
        return (3 * math.sqrt(3) / 2) * self.side_length ** 2
    
    def __str__(self) -> str:
        return f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫(—Å—Ç–æ—Ä–æ–Ω–∞={self.side_length})"


# –ü—Ä–∏–º–µ—Ä 3: –≠–ª–ª–∏–ø—Å
class Ellipse(Shape):
    """–≠–ª–ª–∏–ø—Å."""
    
    def __init__(self, semi_major_axis: float, semi_minor_axis: float):
        if not isinstance(semi_major_axis, (int, float)) or not isinstance(semi_minor_axis, (int, float)):
            raise TypeError("–ü–æ–ª—É–æ—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        
        if semi_major_axis <= 0 or semi_minor_axis <= 0:
            raise ValueError("–ü–æ–ª—É–æ—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        self.semi_major_axis = semi_major_axis
        self.semi_minor_axis = semi_minor_axis
    
    def area(self) -> float:
        # –ü–ª–æ—â–∞–¥—å —ç–ª–ª–∏–ø—Å–∞: œÄ * a * b
        return math.pi * self.semi_major_axis * self.semi_minor_axis
    
    def __str__(self) -> str:
        return f"–≠–ª–ª–∏–ø—Å(a={self.semi_major_axis}, b={self.semi_minor_axis})"


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–µ–≥–∫–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä ===\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–≥—É—Ä
    shapes = [
        Rectangle(4, 6),
        RegularHexagon(5),
        Ellipse(3, 4),
        Rectangle(2.5, 8),
        RegularHexagon(2),
        Ellipse(5, 5),  # –≠—Ç–æ –∫—Ä—É–≥ (a = b)
    ]
    
    print("–í—Å–µ —Ñ–∏–≥—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –µ–¥–∏–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π calculate_area():")
    print("-" * 60)
    
    total_area = 0
    for i, shape in enumerate(shapes, 1):
        area = calculate_area(shape)  # –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –≤ –¥–µ–π—Å—Ç–≤–∏–∏!
        total_area += area
        print(f"{i}. {shape}")
        print(f"   –ü–ª–æ—â–∞–¥—å: {area:.6f}")
        print()
    
    print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä: {total_area:.6f}")
    
    print("\n" + "=" * 60)
    print("üéØ –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã = –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞")
    print("‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä")
    print("‚úÖ –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è")
    print("‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID")


if __name__ == "__main__":
    main() 