#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ geometry_calculator.
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: –∫–ª–∞—Å—Å—ã, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞.
"""

from geometry_calculator import (
    # –ö–ª–∞—Å—Å—ã —Ñ–∏–≥—É—Ä
    Circle, Triangle,
    # –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    calculate_area, is_right_triangle,
    # Legacy —Ñ—É–Ω–∫—Ü–∏–∏
    circle_area, triangle_area
)


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    
    print("=== Geometry Calculator v2.0 - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===\n")
    
    # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ —Ñ–∏–≥—É—Ä
    print("1. –†–∞–±–æ—Ç–∞ —Å –∫–ª–∞—Å—Å–∞–º–∏ —Ñ–∏–≥—É—Ä:")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä
    circle = Circle(5)
    triangle = Triangle(3, 4, 5)
    big_circle = Circle(10)
    equilateral_triangle = Triangle(6, 6, 6)
    
    print(f"–ö—Ä—É–≥: {circle}")
    print(f"–ü–ª–æ—â–∞–¥—å: {circle.area():.6f}")
    print()
    
    print(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: {triangle}")
    print(f"–ü–ª–æ—â–∞–¥—å: {triangle.area():.6f}")
    print(f"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π: {triangle.is_right_triangle()}")
    print()
    
    # 2. –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏
    print("2. –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏:")
    print("-" * 50)
    
    shapes = [circle, triangle, big_circle, equilateral_triangle]
    
    for shape in shapes:
        area = calculate_area(shape)  # –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä!
        print(f"{shape} ‚Üí –ü–ª–æ—â–∞–¥—å: {area:.6f}")
    
    print("\nüéØ –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è calculate_area() —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   —Å –ª—é–±—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏ –±–µ–∑ –∑–Ω–∞–Ω–∏—è –∏—Ö —Ç–∏–ø–∞ –≤ compile-time!\n")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:")
    print("-" * 50)
    
    test_triangles = [
        (3, 4, 5),       # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π
        (5, 12, 13),     # –ï—â–µ –æ–¥–∏–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π
        (8, 6, 10),      # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π (–ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ—Ä–æ–Ω –¥—Ä—É–≥–æ–π)
        (5, 5, 5),       # –†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π (–Ω–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
        (2, 3, 4),       # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π (–Ω–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
        (1, 1, 1.414),   # –ü–æ—á—Ç–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π
    ]
    
    for a, b, c in test_triangles:
        try:
            triangle = Triangle(a, b, c)
            is_right = triangle.is_right_triangle()
            
            # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
            is_right_func = is_right_triangle(a, b, c)
            
            status = "‚úì –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π" if is_right else "‚úó –ù–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π"
            print(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ({a}, {b}, {c}): {status}")
            
        except ValueError as e:
            print(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ({a}, {b}, {c}): ‚ùå {e}")
    
    # 4. –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
    print("\n4. –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä:")
    print("-" * 50)
    print("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:")
    print("1. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π –æ—Ç Shape")
    print("2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã area() –∏ __str__()")
    print("3. –ù–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å calculate_area()!")
    print("\n–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:")
    print("""
class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
    
    def __str__(self):
        return f"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫({self.width}x{self.height})"

# –ò –≤—Å—ë! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
# rect = Rectangle(4, 6)
# area = calculate_area(rect)  # –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
    """)
    
    # 5. –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    print("5. –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (legacy —Ñ—É–Ω–∫—Ü–∏–∏):")
    print("-" * 50)
    
    print("–°—Ç–∞—Ä—ã–π API –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å:")
    old_circle_area = circle_area(5)
    old_triangle_area = triangle_area(3, 4, 5)
    
    print(f"circle_area(5) = {old_circle_area:.6f}")
    print(f"triangle_area(3, 4, 5) = {old_triangle_area:.6f}")
    print("(–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π API —Å –∫–ª–∞—Å—Å–∞–º–∏)")
    
    # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    print("\n6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:")
    print("-" * 50)
    
    error_cases = [
        ("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å", lambda: Circle(-5)),
        ("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", lambda: Triangle(1, 2, 5)),
        ("–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º", lambda: calculate_area("–Ω–µ —Ñ–∏–≥—É—Ä–∞")),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞", lambda: is_right_triangle(1, 1, 5)),
    ]
    
    for description, func in error_cases:
        try:
            result = func()
            print(f"{description}: –û–®–ò–ë–ö–ê - –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è!")
        except (ValueError, TypeError) as e:
            print(f"{description}: {e}")
    
    print("\n=== –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! ===")
    print("‚úÖ –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ–∏–≥—É—Ä")
    print("‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ –≤ compile-time")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞")
    print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")


if __name__ == "__main__":
    main() 